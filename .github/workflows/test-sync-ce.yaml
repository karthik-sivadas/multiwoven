name: Cherry-pick CE commits from Enterprise to OSS

on:
  schedule:
    - cron: "0 0 * * *" # Runs daily at midnight
  workflow_dispatch:

jobs:
  cherry-pick-ce-commits:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout OSS repo
        uses: actions/checkout@v2
        with:
          repository: karthik-sivadas/multiwoven
          ref: main

      - name: Set up SSH
        uses: webfactory/ssh-agent@v0.5.3
        with:
          ssh-private-key: ${{ secrets.SSH_PRIVATE_KEY }}

      - name: Configure Git
        run: |
          git config --global user.name 'github-actions'
          git config --global user.email 'github-actions@github.com'

      - name: Add enterprise remote
        run: |
          git remote add enterprise git@github.com:Multiwoven/multiwoven-ee.git
          git fetch enterprise

      - name: Get date five days ago
        id: date-five-days-ago
        run: |
          FIVE_DAYS_AGO=$(date -d "5 days ago" +'%Y-%m-%d')
          echo "::set-output name=date::$FIVE_DAYS_AGO"

      - name: Fetch CE commits from last five days
        id: fetch-ce-commits
        run: |
          FIVE_DAYS_AGO=${{ steps.date-five-days-ago.outputs.date }}
          CE_COMMITS=$(git log enterprise/main --since="$FIVE_DAYS_AGO" --grep="(CE)" --pretty=format:"%H" --no-merges)
          echo "::set-output name=ce_commits::$CE_COMMITS"
          echo "Commits to cherry-pick: $CE_COMMITS"

      - name: Create new branch for cherry-picked commits
        id: create-new-branch
        run: |
          BRANCH_NAME="cherry-pick-ce-commits-${{ steps.date-five-days-ago.outputs.date }}"
          git checkout -b $BRANCH_NAME
          echo "::set-output name=branch_name::$BRANCH_NAME"
          echo "Created branch: $BRANCH_NAME"

      - name: Cherry-pick CE commits
        id: cherry-pick
        run: |
          CHERRY_PICK_CONFLICT=0
          for commit in $(echo ${{ steps.fetch-ce-commits.outputs.ce_commits }}); do
            echo "Cherry-picking commit $commit"
            git cherry-pick --no-commit $commit || {
              echo "Conflict in commit $commit"
              CHERRY_PICK_CONFLICT=$((CHERRY_PICK_CONFLICT + 1))
              git add .
              git commit -m "Resolve conflict in cherry-pick of $commit"
            }
            git commit --no-edit || true
          done
          echo "::set-output name=conflict_count::$CHERRY_PICK_CONFLICT"
          echo "Number of conflicts: $CHERRY_PICK_CONFLICT"

      - name: Check current branch
        run: git branch

      - name: Check cherry-picked commits
        run: git log --oneline --graph --decorate --all

      - name: Push cherry-picked commits branch
        env:
          GITHUB_TOKEN: ${{ secrets.PERSONAL_ACCESS_TOKEN }}
        run: |
          git remote set-url origin https://$GITHUB_ACTOR:${{ secrets.PERSONAL_ACCESS_TOKEN }}@github.com/karthik-sivadas/multiwoven.git
          git push --set-upstream origin ${{ steps.create-new-branch.outputs.branch_name }}

      - name: Create Pull Request
        if: steps.cherry-pick.outputs.conflict_count != '0'
        uses: peter-evans/create-pull-request@v4
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          commit-message: "Cherry-pick CE commits from Enterprise repo for the last five days"
          branch: ${{ steps.create-new-branch.outputs.branch_name }}
          base: main
          title: "[Conflict] Cherry-pick CE commits from the last five days"
          body: "This PR contains CE commits cherry-picked from the Enterprise repository for the last five days starting from ${{ steps.date-five-days-ago.outputs.date }}. Number of conflicts: ${{ steps.cherry-pick.outputs.conflict_count }}. Please resolve the conflicts."
